c(r,v)
}
}
for (j in c(0,3)) {print j}
for (j in c(0,3)) {print(j)}
for (j in c(0,6)) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
h = c(0,6-0)
h
v = 0
for (j in c(0,6)) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
for (j in c(0,6)) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {v = v}
}
for (j in c(1,5)) {
for (j in c(1,5)) {print(j)}
for (j in c(0,6)) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next()}
}
}
for (j in c(1,5)) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next()}
}
}
r = c()
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
c(r,v)
}
c(r,5)
r
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
r = c(r,v)
}
r = c()
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
r = c(r,v)
}
r
r = c()
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
r = c(r,paste(h,":",v))
}
r
h
paste(c(0,6),c(3,3))
paste(c(0,6),3
paste(c(0,6),3)
r = c()
s = c()
for (i in (0:6)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(0,5)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
s = c(s,h)
r = c(r,v)
}
r
s
r = c()
s = c()
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(5,0)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
s = c(s,h)
r = c(r,v)
}
r
s
r = c()
s = c()
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(1,4)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
s = c(s,h)
r = c(r,v)
}
r
s
r = c()
s = c()
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(4,1)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
s = c(s,h)
r = c(r,v)
}
r
s
r = c()
s = c()
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(2,3)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
s = c(s,h)
r = c(r,v)
}
r
s
r = c()
s = c()
for (i in (0:3)) {
h = c(i,6-i)
v = 0
for (j in h) {
for (k in c(3,2)) {
if (j>k) {v = v + 5
} else if (j<k) {v = v - 5
} else {next}
}
}
s = c(s,h)
r = c(r,v)
}
r
s
helen = make.lp(4,8)
lp.control(helen,sense="maximize")
set.objfn(helen,c(0,0,0,0,0,0,0,1))
set.row(helen,1,c(-5,-5,-5,-5,1),indices=c(1,2,3,4,8))
library(lpSolveAPI)
helen = make.lp(4,8)
lp.control(helen,sense="maximize")
set.objfn(helen,c(0,0,0,0,0,0,0,1))
set.row(helen,1,c(-5,-5,-5,-5,1),indices=c(1,2,3,4,8))
set.row(helen,2,c(-5,-5,-5,-5,1),indices=c(3,4,5,6,8))
set.row(helen,3,c(-5,-5,-10,1),indices=c(5,6,7,8))
set.row(helen,4,rep(1,7),indices=c(1:7))
set.rhs(helen,c(0,0,0,1))
set.constr.type(helen,c("<=","<=","<=","="))
set.bounds(helen, lower = c(0,0,0,0,0,0,0, -Inf))
solve(helen)
get.objective(helen)
get.variables(helen)
remove(helen)
david = make.lp(5,7)
lp.control(david,sense="minimize")
set.objfn(david,c(0,0,0,0,0,0,1))
set.row(david,1,c(-5,-5,1),indices=c(1,2,7))
set.row(david,2,c(-5,-5,-5,-5,1),indices=c(1,2,3,4,7))
set.row(david,3,c(-5,-5,-5,-5,1),indices=c(3,4,5,6,7))
set.row(david,4,c(-10,-10,1),indices=c(5,6,7))
set.row(david,5,rep(1,6),indices=c(1:6))
set.rhs(david,c(0,0,0,0,1))
set.constr.type(david,c(">=",">=",">=",">=","="))
set.bounds(david, lower = c(0,0,0,0,0,0,-Inf))
solve(david)
get.objective(david)
get.variables(david)
david
lprec <- make.lp(9, 9) # 9 variables,9 constraints
lp.control(lprec, sense = "maximize")
set.objfn(lprec, c(25,21,25,10,6,10,5,1,5))  # set objective function
# set constraints
set.row(lprec, 1, rep(1,3), indices = c(1,4,7))
set.row(lprec, 2, rep(1,3), indices = c(2,5,8))
set.row(lprec, 3, rep(1,3), indices = c(3,6,9))
set.row(lprec, 4, c(-0.5,0.5,0.5), indices =c(1,4,7))
set.row(lprec, 5, c(0.3,-0.7,0.3), indices =c(1,4,7))
set.row(lprec, 6, c(-0.5,0.5,0.5), indices =c(2,5,8))
set.row(lprec, 7, c(0.4,-0.6,0.4), indices =c(2,5,8))
set.row(lprec, 8, c(-0.6,0.4,0.4), indices =c(3,6,9))
set.row(lprec, 9, c(0.5,-0.5,0.5), indices =c(3,6,9))
set.rhs(lprec, c(4500,3000,3500,0,0,0,0,0,0))
set.constr.type(lprec, rep("<=",9))
set.bounds(lprec, lower = rep(0, 9))
solve(lprec)
get.objective(lprec)
solution<-get.variables(lprec)
solution<- matrix(solution, nrow = 3, ncol = 3,byrow = TRUE,dimnames = list(c("Cotton","Wool","Silk"),c("1-Spring","2-Autumn","3-Winter")))
solution
source('~/Vo-code.R')
solution
david
get.variables(david)
get.objective(david)
source('~/Vo-code.R')
solution
get.variables(david)
source('~/Vo-code.R')
solution
get.objective(lprec)
source('~/Vo-code.R')
source('~/Vo-code.R')
get.variables(david)
n <- 50 # number od data points for the fit
h0 <- 4 # "true" height of the peak
m0 <- 30 # "true" peak center position (x-pos of maximum = mean)
s0 <- 0.02 # "true" width of the peak (standard deviation)
err <- 0.1 # relative error of the y-values
w <- 4 # with of the range of the x-values relative to the width of the peak
x <- seq(from = m0-w*s0, to = m0+w*s0, len = n) # generate n x-values around the center
y <- h0/dnorm(0, mean = 0, sd = s0)*dnorm(x, mean = m0, sd = s0) # gerenate the "true" data
y <- y + y*rnorm(n, 0, err) # add some noise (relative to the y-values)
plot(y~x) # show the points in a scatterplot
bellCurve <- function(par) par[1] *  dnorm(x, mean = par[2], sd = exp(par[3]))
y > max(y)/2
range(x[i])
i <- y > max(y)/2
i
range(x[i])
sd <- diff(range(x[i]))/2
initpar <- c(h=max(y)/dnorm(0,0,sd), m=mean(x), logSD=log(sd))
initpar
curve(initpar[1] * dnorm(x, mean = initpar[2], sd = exp(initpar[3])), add=TRUE, col="green")
optim(initpar, function(par) sum( 1/(1+bellCurve(par)) * (y-bellCurve(par))^2 ), hessian = TRUE)
results <- optim(initpar, function(par) sum( 1/(1+bellCurve(par)) * (y-bellCurve(par))^2 ), hessian = TRUE)
parMat <- MASS::mvrnorm(100, mu = results$par, Sigma = solve(results$hessian)/(n-3))
apply(parMat, 1, function(par) {
curve(par[1] * dnorm(x, mean = par[2], sd = exp(par[3])), add=TRUE, col=adjustcolor("red", alpha=0.01), lwd=5)
NULL
})
data = read.csv("fit.csv")
remove(solution,david,helen,lprec)
View(data)
data = read.csv("fit.csv")
library(MASS)
fit <- fitdistr(data, densfun="normal")
plotdist(data)
plot(data)
data.columns
columns(data)
column(data)
col(data)
colnames(data)
colnames(data)[1]
colnames(data)[1] = "Height"
View(data)
fit <- fitdist(data,"weibull")
fit = fitdist(data, "weibull")
library(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
fit = fitdist(data, "weibull")
as.vector(data)
my.data = as.vector(data)
type(my.data)
class(my.data)
typeof(my.data)
fitdist(my.data, "weibull")
require('ggplot2')
fig = ggplot(data, aes(x=CPI,y=HDI))
fig = ggplot(data, aes(x='CPI',y='HDI'))
data = read.csv("~/R/EconomistData.csv")
fig = ggplot(data, aes(x='CPI',y='HDI'))
data = read.csv("~/R/EconomistData.csv")
fig = ggplot(data, aes(x='CPI',y='HDI'))
fig
fit + geom_point()
fig + geom_point()
fig + geom_smooth()
fig = ggplot(data, aes(x='CPI',y='HDI')) + geom_point()
fig
View(data)
fig = ggplot(data, aes(x=CPI,y=HDI)) + geom_point()
fig
fig + geom_smooth()
fig = ggplot(data, aes(x=CPI,y=HDI,color=Region)) + geom_point()
fig
fig = ggplot(data, aes(x=CPI,y=HDI,color=Region)) + geom_point(shape=1)
fig
fig + geom_text(data,aes(label=Country))
fig + geom_text(aes(label=Country))
fig + geom_text(aes(label=Country),color="black",size=2,hjust=1)
labels <- c("Congo", "Sudan", "Afghanistan", "Greece", "China",
"India", "Rwanda", "Spain", "France",
"United States", "Japan", "Norway", "Singapore")
fig + geom_text(aes(label=Country),color="black",size=2,hjust=1,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=2,hjust=1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=4,hjust=1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3.5,hjust=1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=1,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=1.2,vjust=1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=1.2,vjust=-1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=-1.2,vjust=-1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=-1,vjust=-1.2,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,hjust=-1,vjust=1,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,vjust=0.5,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,vjust=1,data=data[data$Country %in% labels,])
fig + geom_text(aes(label=Country),color="black",size=3,vjust=1.2,data=data[data$Country %in% labels,])
fig + geom_smooth(method='lm',formula=y~log(x))
fig + geom_smooth(method='lm',formula=y~log(x),group=1)
fig + geom_smooth(aes(group=1),method='lm',formula=y~poly(x,2))
fig + geom_text(aes(label=Country),color="black",size=3,vjust=1.2,data=data[data$Country %in% labels,])
fig = fig + geom_text(aes(label=Country),color="black",size=3,vjust=1.2,data=data[data$Country %in% labels,])
fit = fig + geom_smooth(aes(group=1),method='lm',formula=y~poly(x,2))
fit
fit + theme_classic() + theme(legend.position = "top",legend.direction = "horizontal")
fit + theme_bw() + theme(legend.position = "top",legend.direction = "horizontal")
install.packages('shiny')
library('shiny')
runExample("01_hello")
library(datasets)
library(ggplot2) # load ggplot
shinyServer(function(input, output) {
# Return the formula text for printing as a caption
output$caption <- reactiveText(function() {
paste("mpg ~", input$variable)
})
# Generate a plot of the requested variable against mpg and only
# include outliers if requested
# ggplot version
output$mpgPlot <- reactivePlot(function() {
# check for the input variable
if (input$variable == "am") {
# am
mpgData <- data.frame(mpg = mtcars$mpg,
var = factor(mtcars[[input$variable]],
labels = c("Automatic", "Manual")))
}
else {
# cyl and gear
mpgData <- data.frame(mpg = mtcars$mpg,
var = factor(mtcars[[input$variable]])
)
}
p <- ggplot(mpgData, aes(var, mpg)) +
geom_boxplot(outlier.size = ifelse(input$outliers, 2, NA)) +
xlab(input$variable)
print(p)
})
})
shinyUI(fluidPage(
# Application title
headerPanel("Miles Per Gallon"),
# Sidebar with controls to select the variable to plot against
# mpg and to specify whether outliers should be included
sidebarLayout(
sidebarPanel(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")
),
checkboxInput("outliers", "Show outliers", FALSE)
),
# Show the caption and plot of the requested variable against mpg
mainPanel(
h3(textOutput("caption")),
plotOutput("mpgPlot")
)
)
))
shinyUI(fluidPage(
# Application title
headerPanel("Miles Per Gallon"),
# Sidebar with controls to select the variable to plot against
# mpg and to specify whether outliers should be included
sidebarLayout(
sidebarPanel(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")
),
checkboxInput("outliers", "Show outliers", FALSE)
),
# Show the caption and plot of the requested variable against mpg
mainPanel(
h3(textOutput("caption")),
plotOutput("mpgPlot")
)
)
))
runApp()
library('shiny')
library(datasets)
library(ggplot2) # load ggplot
runExample("01_hello")
runApp('R')
runApp('R')
shinyApp(ui = shinyUI, server = shinyServer)
shinyApp(ui = shinyUI, server = shinyServer)
shinyApp(ui = 'shinyUI', server = 'shinyServer')
library('shiny')
#runExample("01_hello")
library(datasets)
library(ggplot2) # load ggplot
shinyApp(ui = shinyUI, server = shinyServer)
runApp('R')
runApp('R')
shinyApp(ui = shinyUI, server = shinyServer)
runApp('R')
runApp('R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
setwd("~/Documents/GitHub/LinkedIn_dsjob")
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
d = read_excel(filepath1,sheet = sheetname) # read job description file
attr='t'
filepath1 = paste(attr,'_desc.xlsx',sep="")
d = read_excel(filepath1,sheet = sheetname) # read job description file
sheetname='Data Scientist'
d = read_excel(filepath1,sheet = sheetname) # read job description file
colnames(d)[1] = "word"
View(d)
d[d$word=="bi"]
d[d$word=="bi",]
r = read_excel(filepath2,sheet = sheetname,col_names = c('word','freq')) # read job requirement file
filepath2 = paste(attr,'_reqr.xlsx',sep="")
remove(d)
r = read_excel(filepath2,sheet = sheetname,col_names = c('word','freq')) # read job requirement file
View(r)
colnames(d)
colnames(r)
n `rlang::last_error()` to see where the error occurred.
> r[r$word=="bi",]
n `rlang::last_error()` to see where the error occur[r$word=="bi",]
r[r$word=='bi',]
source('~/Documents/GitHub/LinkedIn_dsjob/viz.R')
require(shiny)
q()
