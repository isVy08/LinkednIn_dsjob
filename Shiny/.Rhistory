data4$exp_level_v3 = factor(data4$exp_level_v3, levels = c('Entry level','Associate','Senior'))
# Sort levels of min degree
data4$min_degree = factor(data4$min_degree, levels = c('Bachelor','Master','Phd','Not mention'))
# Intialize user options
position = levels(data4$title_v3) # data position
exp_level = levels(data4$exp_level_v3) # experience level
# df = data4[(data4$title_v3==position[1]) & (data4$exp_level_v3 %in% exp_level),]
df = data4[(data4$title_v3==position[1]) & (data4$exp_level_v3 == exp_level[1]),]
metric = 'median'
fig = ggplot(data=df,aes(x=exp_level_v3)) +
geom_bar(aes(fill="Number of Jobs")) + ylab('Number of Jobs') + xlab(NULL) +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, size = 3, color = 'grey30', geom = "point") +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, color = 'black', geom = "text", vjust = 3, hjust = 0, size = 3, label = values$x) +
stat_summary(aes(y=exp_year*(nrow(df)/20), group = 1, linetype='Min Years of Exp'), fun.y = metric, na.rm = T, color = 'grey30', geom = "line") +
scale_linetype_manual(name=NULL,values = c('Min Years of Exp'='dashed')) +
scale_fill_manual(name=NULL,values = c("Number of Jobs"='steelblue')) +
facet_grid(cols = vars(min_degree)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill='whitesmoke'),
legend.position="top",
legend.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
legend.text = element_text(colour = "black", size = 13, face = 'bold', family = 'serif'),
axis.title.y = element_text(size = 13, family = 'serif'),
axis.text.x = element_text(size = 13, family = 'serif')
)
fig
values = df[!is.na(df$exp_year),]
values = aggregate(values$exp_year,by=list(values$exp_level_v3,values$min_degree),median)
fig = ggplot(data=df,aes(x=exp_level_v3)) +
geom_bar(aes(fill="Number of Jobs")) + ylab('Number of Jobs') + xlab(NULL) +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, size = 3, color = 'grey30', geom = "point") +
#stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, color = 'black', geom = "text", vjust = 3, hjust = 0, size = 3, label = values$x) +
stat_summary(aes(y=exp_year*(nrow(df)/20), group = 1, linetype='Min Years of Exp'), fun.y = metric, na.rm = T, color = 'grey30', geom = "line") +
scale_linetype_manual(name=NULL,values = c('Min Years of Exp'='dashed')) +
scale_fill_manual(name=NULL,values = c("Number of Jobs"='steelblue')) +
facet_grid(cols = vars(min_degree)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill='whitesmoke'),
legend.position="top",
legend.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
legend.text = element_text(colour = "black", size = 13, face = 'bold', family = 'serif'),
axis.title.y = element_text(size = 13, family = 'serif'),
axis.text.x = element_text(size = 13, family = 'serif')
)
fig
df = data4[(data4$title_v3==position[1]) & (data4$exp_level_v3 %in% exp_level),]
values = aggregate(values$exp_year,by=list(values$exp_level_v3,values$min_degree),median)
values = aggregate(values$exp_year,by=list(values$exp_level_v3,values$min_degree),median)
values = df[!is.na(df$exp_year),]
values = aggregate(values$exp_year,by=list(values$exp_level_v3,values$min_degree),median)
fig = ggplot(data=df,aes(x=exp_level_v3)) +
geom_bar(aes(fill="Number of Jobs")) + ylab('Number of Jobs') + xlab(NULL) +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, size = 3, color = 'grey30', geom = "point") +
#stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, color = 'black', geom = "text", vjust = 3, hjust = 0, size = 3, label = values$x) +
stat_summary(aes(y=exp_year*(nrow(df)/20), group = 1, linetype='Min Years of Exp'), fun.y = metric, na.rm = T, color = 'grey30', geom = "line") +
scale_linetype_manual(name=NULL,values = c('Min Years of Exp'='dashed')) +
scale_fill_manual(name=NULL,values = c("Number of Jobs"='steelblue')) +
facet_grid(cols = vars(min_degree)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill='whitesmoke'),
legend.position="top",
legend.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
legend.text = element_text(colour = "black", size = 13, face = 'bold', family = 'serif'),
axis.title.y = element_text(size = 13, family = 'serif'),
axis.text.x = element_text(size = 13, family = 'serif')
)
fig
fig = ggplot(data=df,aes(x=exp_level_v3)) +
geom_bar(aes(fill="Number of Jobs")) + ylab('Number of Jobs') + xlab(NULL) +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, size = 3, color = 'grey30', geom = "point") +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, color = 'black', geom = "text", vjust = 3, hjust = 0, size = 3, label = values$x) +
stat_summary(aes(y=exp_year*(nrow(df)/20), group = 1, linetype='Min Years of Exp'), fun.y = metric, na.rm = T, color = 'grey30', geom = "line") +
scale_linetype_manual(name=NULL,values = c('Min Years of Exp'='dashed')) +
scale_fill_manual(name=NULL,values = c("Number of Jobs"='steelblue')) +
facet_grid(cols = vars(min_degree)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill='whitesmoke'),
legend.position="top",
legend.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
legend.text = element_text(colour = "black", size = 13, face = 'bold', family = 'serif'),
axis.title.y = element_text(size = 13, family = 'serif'),
axis.text.x = element_text(size = 13, family = 'serif')
)
fig
fig = ggplot(data=df,aes(x=exp_level_v3)) +
geom_bar(aes(fill="Number of Jobs")) + ylab('Number of Jobs') + xlab(NULL) +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, size = 3, color = 'grey30', geom = "point") +
#stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, color = 'black', geom = "text", vjust = 3, hjust = 0, size = 3, label = values$x) +
stat_summary(aes(y=exp_year*(nrow(df)/20), group = 1, linetype='Min Years of Exp'), fun.y = metric, na.rm = T, color = 'grey30', geom = "line") +
scale_linetype_manual(name=NULL,values = c('Min Years of Exp'='dashed')) +
scale_fill_manual(name=NULL,values = c("Number of Jobs"='steelblue')) +
facet_grid(cols = vars(min_degree)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill='whitesmoke'),
legend.position="top",
legend.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
legend.text = element_text(colour = "black", size = 13, face = 'bold', family = 'serif'),
axis.title.y = element_text(size = 13, family = 'serif'),
axis.text.x = element_text(size = 13, family = 'serif')
)
fig
View(values)
colnames(values) = c('Exp','Degree','Year')
levels(data4$min_degree)
unique(df$min_degree)
df = data4[(data4$title_v3==position[1]) & (data4$exp_level_v3 %in% exp_level),]
position[1]
df = data4[(data4$title_v3==position[1]) & (data4$exp_level_v3 %in% exp_level),]
unique(df$min_degree)
unique(data4$min_degree)
data4 = read.csv('data4.csv')
# Sort levels of exp level
data4$exp_level_v3 = factor(data4$exp_level_v3, levels = c('Entry level','Associate','Senior'))
# Sort levels of min degree
data4$min_degree = factor(data4$min_degree, levels = c('Bachelor','Master','Phd','Not Required'))
# Intialize user options
position = levels(data4$title_v3) # data position
exp_level = levels(data4$exp_level_v3) # experience level
df = data4[(data4$title_v3==position[1]) & (data4$exp_level_v3 %in% exp_level),]
values = aggregate(values$exp_year,by=list(values$exp_level_v3,values$min_degree),mean)
values$x = round(values$x,1)
metric = 'mean'
values = df[!is.na(df$exp_year),]
values = aggregate(values$exp_year,by=list(values$exp_level_v3,values$min_degree),mean)
values$x = round(values$x,1)
metric = 'mean'
fig = ggplot(data=df,aes(x=exp_level_v3)) +
geom_bar(aes(fill="Number of Jobs")) + ylab('Number of Jobs') + xlab(NULL) +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, size = 3, color = 'grey30', geom = "point") +
stat_summary(aes(y=exp_year*(nrow(df)/20)), fun.y = metric, na.rm = T, color = 'black', geom = "text", vjust = 3, hjust = 0, size = 3, label = values$x) +
stat_summary(aes(y=exp_year*(nrow(df)/20), group = 1, linetype='Min Years of Exp'), fun.y = metric, na.rm = T, color = 'grey30', geom = "line") +
scale_linetype_manual(name=NULL,values = c('Min Years of Exp'='dashed')) +
scale_fill_manual(name=NULL,values = c("Number of Jobs"='steelblue')) +
facet_grid(cols = vars(min_degree)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill='whitesmoke'),
legend.position="top",
legend.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt"),
legend.text = element_text(colour = "black", size = 13, face = 'bold', family = 'serif'),
axis.title.y = element_text(size = 13, family = 'serif'),
axis.text.x = element_text(size = 13, family = 'serif')
)
fig
runApp('word tree.R')
?runApp
source('word tree.R')
source('word tree.R')
?runif
runif(10,1,10)
data = data.frame(col1 = c(10,12,14,16,18),
col2 = c(20,22,24,26,28),
col3 = c(30,32,34,36,38)
)
View(data)
data4 = read.csv('test.csv')
data4 = read.csv('test.csv')
?subset
View(data4)
df = subset(data4,title_v3=='Data Scientist',exp_level_v3 %in% c('Entry level','Senior'))
View(df)
df = data4[data4$title_v3 =='Data Scientist' & data4$exp_level_v3 %in% c('Entry level','Senior')),]
df = data4[(data4$title_v3 =='Data Scientist') & (data4$exp_level_v3 %in% c('Entry level','Senior')),]
View(df)
source('word tree.R')
source('word tree.R')
runApp()
runApp()
runApp()
?selectInput
runApp()
output[[paste0('row', i)]] = renderUI({
tagList(
tags$h1(paste('Col1',df[i,col1])),
tags$h2(paste('Col2',df[i,col2])),
tags$h3(paste('Col3',df[i,col3]))
)
})
runApp()
runApp()
runApp()
i = 1
df = data[data$col1 < 5,]
df
df = data[data$col1 < 33,]
View(df)
df = data[data$col1 < 15,]
df
df[i,col1]
df[i,'col1']
runApp()
runApp()
shiny::runApp()
uiOutput
?uiOutput
source('word tree.R')
source('word tree.R')
source('word tree.R')
source('word tree.R')
source('word tree.R')
View(data4)
source('word tree.R')
source('word tree.R')
source('word tree.R')
source('word tree.R')
View(data3)
source('word tree.R')
source('word tree.R')
source('word tree.R')
col = paste(gsub(' ','.',"Data Scientist"),'.',gsub(' ','.',c("Entry level",'Senior')),sep='')
njob = nrow(data4[(data4$title_v3=="Data Scientist") & (data4$exp_level_v3 %in% c("Entry level",'Senior')),])
njob
df = data3[,c('industry_v2',col)]
View(df)
df = cbind(df,rowSums(df[,c(2:3)]))
df = df[c(1,4)]
colnames(df) = c('Industry','Freq')
df['Prop'] = round((df$Freq)/njob,3)
newlevels = levels(df$Industry)[order(df$Freq,decreasing = FALSE)]
df$Industry = factor(df$Industry,levels = newlevels)
df = df[order(df$Freq,decreasing=T),]
df = df[1:20,]
bar = ggplot(data=df, aes(x=Industry, y=Prop)) + geom_col(fill='steelblue4') + coord_flip() +
ylab('Proportion of Jobs') +
geom_text(aes(label = paste(Prop*100,'%',sep='')), position = position_dodge(0.9), hjust = -0.1, family = 'serif') +
theme(panel.background = element_blank(),
axis.title = element_text(size = 13, family = 'serif'),
axis.text = element_text(size = 10, family = 'serif')
)
bar
source('word tree.R')
length(c("Entry level",'Senior'))
df = cbind(df,rowSums(df[,c(2:3)]))
df = data3[,c('industry_v2',col)]
df = cbind(df,rowSums(df[,c(2:3)]))
df[c(1,4)]
df = df[c(1,4)]
colnames(df) = c('Industry','Freq')
df['Prop'] = round((df$Freq)/njob,3)
newlevels = levels(df$Industry)[order(df$Freq,decreasing = FALSE)]
df$Industry = factor(df$Industry,levels = newlevels)
df = df[order(df$Freq,decreasing=T),]
df = df[1:20,]
bar = ggplot(data=df, aes(x=Industry, y=Prop)) + geom_col(fill='steelblue4') + coord_flip() +
ylab('Proportion of Jobs') +
geom_text(aes(label = paste(Prop*100,'%',sep='')), position = position_dodge(0.9), hjust = -0.1, family = 'serif') +
theme(panel.background = element_blank(),
axis.title = element_text(size = 13, family = 'serif'),
axis.text = element_text(size = 10, family = 'serif')
)
bar
df = data3[,c('industry_v2',col)]
cbind(df,rowSums(df[,c(2:3)]))
df = cbind(df,rowSums(df[,c(2:3)]))
a = df[c(1,4)]
View(a)
source('word tree.R')
col = paste(gsub(' ','.',"Data Scientist"),'.',gsub(' ','.',c("Entry level",'Senior')),sep='')
col
df = data3[,c('industry_v2',col)]
View(df)
njob = nrow(data4[(data4$title_v3=="Data Scientist") & (data4$exp_level_v3 %in% c("Entry level",'Senior')),])
remove(a)
source('word tree.R')
df = cbind(df,rowSums(df[,c(2:3)]))
a = df[,c(1,4)]
View(a)
typeof(a)
class(a)
df = data3[,c('industry_v2',col)]
col = paste(gsub(' ','.',"Data Scientist"),'.',gsub(' ','.',c("Entry level")),sep='')
df = data3[,c('industry_v2',col)]
df = cbind(df,rowSums(df[,c(2:2)]))
source('word tree.R')
source('word tree.R')
source('word tree.R')
source('word tree.R')
source('word tree.R')
country = levels(data4$country)
?checkboxGroupInput
source('word tree.R')
source('word tree.R')
source('word tree.R')
library(shiny); source('word tree.R')
library(shiny); source('word tree.R')
source('word tree.R')
source('word tree.R')
library(shiny); source('word tree.R')
library(shiny); source('word tree.R')
library(shiny); source('word tree.R')
source('word tree.R')
library(shiny); source('word tree.R')
library(shiny); source('word tree.R')
source('word tree.R')
stopApp()
library(shiny); source('word tree.R')
source('word tree.R')
stopApp()
source('word tree.R')
source('word tree.R')
source('word tree.R')
runApp('word tree.R')
library(shiny); source('shiny.R')
library(shiny); source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
col = paste(gsub(' ','.',"Data Scientist"),'.',gsub(' ','.',c("Entry level",'Senior')),sep='')
col
kw = as.vector(data2$keyword)
freq = data2[,col]
freq
inputlength = 2
par(mfrow=c(1,inputlength))
for (i in c(1:inputlength)) {
wordcloud(kw,as.vector(freq[,i]), min.freq = input$minfreq, max.words = input$maxword, scale = c(6,.8), random.order=FALSE, rot.per=0.5, use.r.layout=T, colors=colors, family = 'serif')
title(main=input$explevel[i],cex.main=2,family='serif')}
}
source('shiny.R')
source('shiny.R')
runApp()
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
source('shiny.R')
runApp()
runApp()
runApp()
runApp()
source('shiny.R')
source('shiny.R')
source('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp()
runApp()
runApp()
runApp()
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp()
runApp()
runApp()
?style
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('shiny.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('shiny.R')
runApp()
runApp()
runApp('shiny.R')
runApp('shiny.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('shiny.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('shiny.R')
runApp()
runApp()
runApp('shiny.R')
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('shiny.R')
runApp('shiny.R')
source('shiny.R')
?runApp
source('~/shiny.R')
source('~/shiny.R')
source('shiny.R')
source('shiny.R')
setwd("~/Documents/GitHub/LinkedIn_dsjob/shiny")
shiny::runApp()
runGitHub("LinkedIn_dsjob", "isVy08")
runGitHub("LinkedIn_dsjob/Shiny", "isVy08")
runGitHub("LinkedIn_dsjob", "isVy08",subdir = "Shiny")
runGitHub("LinkedIn_dsjob", "isVy08",subdir = "Shiny")
runGitHub("LinkedIn_dsjob", "isVy08", subdir = "Shiny/")
runGitHub("LinkedIn_dsjob", "isVy08", subdir = "Shiny/")
terminateApp("DSjob")
rsconnect::terminateApp("DSjob")
runGitHub("LinkedIn_dsjob", "isVy08", subdir = "Shiny/")
runGitHub("LinkedIn_dsjob", "isVy08", subdir = "Shiny/")
data4 = read.csv('data4.csv')
# Intialize user options
position = levels(data4$title_v3) # data position
position
exp_level = levels(data4$exp_level_v3) # experience level
country = levels(data4$country)
exp_level
country
runGitHub("LinkedIn_dsjob", "isVy08", subdir = "Shiny/")
runApp()
library(shiny)
library(shiny)
runApp()
library(r2d3)
runApp()
library(c(googleVis, gwordtree, wordcloud, RColorBrewer, ggplot2, plotly))
packages = c(googleVis, gwordtree, wordcloud, RColorBrewer, ggplot2)
packages = c("shiny","googleVis", "gwordtree", "wordcloud", "RColorBrewer", "ggplot2","plotly","r2d3")
lapply(packages, require, character.only = TRUE)
clear()
clear
runApp()
runApp()
stop()
